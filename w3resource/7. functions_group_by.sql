-- Exercise 1 --

-- From the following table, write a SQL query to calculate total purchase amount of all orders. Return total purchase amount.

select sum(purch_amt) as purch_amt from inventory.orders

-- Exercise 2 --

-- From the following table, write a SQL query to calculate the average purchase amount of all orders. Return average purchase amount. 

select avg(purch_amt) as avg from inventory.orders

-- Exercise 3 --

-- From the following table, write a SQL query that counts the number of unique salespeople. Return number of salespeople. 

select count(distinct salesman_id) from inventory.orders

-- Exercise 4 --

-- From the following table, write a SQL query to count the number of customers. Return number of customers. 

select count(customer_id) from inventory.customer

-- Exercise 5 --

-- From the following table, write a SQL query to determine the number of customers who received at least one grade for their activity.  

select count(grade) from inventory.customer

-- Exercise 6 --

-- From the following table, write a SQL query to find the maximum purchase amount.  

select max(purch_amt) from inventory.orders

-- Exercise 7 --

-- From the following table, write a SQL query to find the minimum purchase amount. 

select min(purch_amt) from inventory.orders

-- Exercise 8 --

-- From the following table, write a SQL query to find the highest grade of the customers in each city. Return city, maximum grade.

select city, max(grade) as max from inventory.customer
group by city
order by max desc

-- Exercise 9 --

-- From the following table, write a SQL query to find the highest purchase amount ordered by each customer. Return customer ID, maximum purchase amount. 

select customer_id, max(purch_amt) as max from inventory.orders
group by customer_id

-- Exercise 10 --

-- From the following table, write a SQL query to find the highest purchase amount ordered by each customer on a particular date. 
-- Return, order date and highest purchase amount.

select customer_id, ord_date, max(purch_amt) from inventory.orders
group by customer_id, ord_date

-- Exercise 11 --

-- From the following table, write a SQL query to determine the highest purchase amount made by each salesperson on '2012-08-17'. 
-- Return salesperson ID, purchase amount 

select salesman_id, max(purch_amt) from inventory.orders
where ord_date = '2012-08-17'
group by salesman_id

-- Exercise 12 --

-- From the following table, write a SQL query to find the highest order (purchase) amount by each customer on a particular order date. 
-- Filter the result by highest order (purchase) amount above 2000.00. 
-- Return customer id, order date and maximum purchase amount.

select customer_id, ord_date, max(purch_amt) as max from inventory.orders
group by customer_id, ord_date
having max(purch_amt) > 2000

-- Exercise 13 -- 

-- From the following table, write a SQL query to find the maximum order (purchase) amount in the range 2000 - 6000 (Begin and end values are included.) 
-- by combination of each customer and order date. 
-- Return customer id, order date and maximum purchase amount.

select customer_id, ord_date, max(purch_amt) as max from inventory.orders
group by customer_id, ord_date
having max(purch_amt) between 2000 and 6000

-- Exercise 14 -- 

-- From the following table, write a SQL query to find the maximum order (purchase) amount based on the combination of each customer and order date. 
-- Filter the rows for maximum order (purchase) amount is either 2000, 3000, 5760, 6000. 
-- Return customer id, order date and maximum purchase amount.

select customer_id, ord_date, max(purch_amt) as max from inventory.orders
group by customer_id, ord_date
having max(purch_amt) in (2000, 3000, 5760, 6000)

-- Exercise 15 -- 

-- From the following table, write a SQL query to determine the maximum order amount for each customer. 
-- The customer ID should be in the range 3002 and 3007(Begin and end values are included.). Return customer id and maximum purchase amount.

select customer_id, max(purch_amt) from inventory.orders
where customer_id between 3002 and 3007
group by customer_id

-- Exercise 16 --

-- From the following table, write a SQL query to find the maximum order (purchase) amount for each customer. 
-- The customer ID should be in the range 3002 and 3007(Begin and end values are included.). 
-- Filter the rows for maximum order (purchase) amount is higher than 1000. Return customer id and maximum purchase amount

select customer_id, max(purch_amt) as max from inventory.orders
where customer_id between 3002 and 3007
group by customer_id
having max(purch_amt) > 1000

-- Exercise 17 --

-- From the following table, write a SQL query to determine the maximum order (purchase) amount generated by each salesperson. 
-- Filter the rows for the salesperson ID is in the range 5003 and 5008 (Begin and end values are included.). 
-- Return salesperson id and maximum purchase amount.

select salesman_id, max(purch_amt) as max from inventory.orders
where salesman_id between 5003 and 5008
group by salesman_id

-- Exercise 18 --

-- From the following table, write a SQL query to count all the orders generated on '2012-08-17'. Return number of orders.

select count(purch_amt) from inventory.orders
where ord_date = '2012-08-17'

-- Exercise 19 --

-- From the following table, write a SQL query to count the number of salespeople in a city. Return number of salespeople.

select count(city) from inventory.salesman

-- Exercise 20 --

-- From the following table, write a SQL query to count the number of orders based on the combination of each order date and salesperson. 
-- Return order date, salesperson id.

select ord_date, salesman_id, count(*) as count from inventory.orders
group by ord_date, salesman_id

-- Exercise 21 --

-- From the following table, write a SQL query to calculate the average product price. Return average product price.

select avg(pro_price) from item_mast

-- Exercise 22 --

-- From the following table, write a SQL query to count the number of products whose price are higher than or equal to 350. Return number of products.

select count(pro_price) as [number of products] from item_mast
where pro_price >= 350

-- Exercise 23 --

-- From the following table, write a SQL query to compute the average price for unique companies. Return average price and company id.

select avg(pro_price) as average, pro_com as [company id] from item_mast
group by pro_com

-- Exercise 24 --

-- From the following table, write a SQL query to compute the sum of the allotment amount of all departments. Return sum of the allotment amount.

select * from employee.department

-- Exercise 25 --

-- From the following table, write a SQL query to count the number of employees in each department. Return department code and number of employees.

select emp_dept as [department code], count(*) as [number of employees] from emp_details
group by emp_dept


